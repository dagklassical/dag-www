---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
---

<Layout title="Tienda NFT - DAG Klassical" description="Explora y adquiere NFTs musicales únicos en la blockchain de Polygon">
  <Header slot="header" />
  
  <!-- Hero Section -->
  <section class="store-hero">
    <div class="container">
      <div class="hero-content">
        <h1 class="hero-title">
          <span class="text-gradient">Tienda NFT</span>
          <span>DAG Klassical</span>
        </h1>
        <p class="hero-description">
          Descubre una colección única de NFTs musicales creados por artistas venezolanos y latinoamericanos. 
          Cada pieza es auténtica, verificable y respaldada por la blockchain de Polygon.
        </p>
        
        <!-- Wallet Connection Status -->
        <div class="wallet-status" id="walletStatus">
          <div class="wallet-disconnected" id="walletDisconnected">
            <p>Conecta tu wallet MetaMask para explorar y comprar NFTs</p>
            <button class="btn btn-primary" id="connectWalletBtn">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M21 7H3C2.447 7 2 7.447 2 8V16C2 17.103 2.897 18 4 18H20C21.103 18 22 17.103 22 16V8C22 7.447 21.553 7 21 7Z" stroke="currentColor" stroke-width="2" fill="none"/>
                <path d="M18 12H18.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
              Conectar MetaMask
            </button>
          </div>
          
          <div class="wallet-connected hidden" id="walletConnected">
            <div class="wallet-info">
              <div class="wallet-address">
                <span class="address-label">Wallet:</span>
                <span class="address-value" id="walletAddress">0x...</span>
              </div>
              <div class="wallet-balance">
                <span class="balance-label">Balance:</span>
                <span class="balance-value" id="walletBalance">0 MATIC</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  
  <!-- Filters -->
  <section class="filters">
    <div class="container">
      <div class="filters-container">
        <div class="filter-group">
          <label for="categoryFilter">Categoría:</label>
          <select id="categoryFilter" class="filter-select">
            <option value="all">Todas las categorías</option>
            <option value="album">Álbumes completos</option>
            <option value="single">Piezas individuales</option>
            <option value="collection">Colecciones especiales</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label for="priceFilter">Precio:</label>
          <select id="priceFilter" class="filter-select">
            <option value="all">Todos los precios</option>
            <option value="low">0 - 1 MATIC</option>
            <option value="medium">1 - 5 MATIC</option>
            <option value="high">5+ MATIC</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label for="sortFilter">Ordenar por:</label>
          <select id="sortFilter" class="filter-select">
            <option value="newest">Más recientes</option>
            <option value="oldest">Más antiguos</option>
            <option value="price-low">Precio: Menor a mayor</option>
            <option value="price-high">Precio: Mayor a menor</option>
            <option value="name">Nombre A-Z</option>
          </select>
        </div>
        
        <button class="btn btn-secondary" id="refreshNFTs">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1 4V10H7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M23 20V14H17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M20.49 9C19.9828 7.58312 19.1209 6.32398 17.9845 5.35677C16.8482 4.38956 15.4745 3.75111 14.0003 3.50385C12.5261 3.25659 11.0084 3.41104 9.61644 3.95295C8.22448 4.49487 7.01436 5.40508 6.12 6.57999L1 10.99" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M23 13.01L17.88 17.43C16.9856 18.6049 15.7755 19.5151 14.3836 20.057C12.9916 20.5989 11.4739 20.7534 9.99969 20.5061C8.52547 20.2589 7.15183 19.6204 6.01547 18.6532C4.87911 17.686 4.01719 16.4269 3.51 15.01" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          Actualizar
        </button>
      </div>
    </div>
  </section>
  
  <!-- NFT Grid -->
  <section class="nft-grid-section">
    <div class="container">
      <!-- Loading State -->
      <div class="loading-state" id="loadingState">
        <div class="loading-spinner"></div>
        <p>Cargando NFTs desde la blockchain...</p>
      </div>
      
      <!-- NFT Grid -->
      <div class="nft-grid" id="nftGrid">
        <!-- Los NFTs se cargarán dinámicamente desde el contrato -->
      </div>
      
      <!-- Empty State -->
      <div class="empty-state hidden" id="emptyState">
        <div class="empty-icon">
          <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2"/>
            <path d="m21 21-4.35-4.35" stroke="currentColor" stroke-width="2"/>
          </svg>
        </div>
        <h3>No se encontraron NFTs</h3>
        <p>Intenta ajustar los filtros o conecta tu wallet para ver la colección completa.</p>
      </div>
    </div>
  </section>
  
  <!-- Purchase Modal -->
  <div class="modal-overlay hidden" id="purchaseModal">
    <div class="modal">
      <div class="modal-header">
        <h3>Comprar NFT</h3>
        <button class="modal-close" id="modalClose">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <line x1="18" y1="6" x2="6" y2="18" stroke="currentColor" stroke-width="2"/>
            <line x1="6" y1="6" x2="18" y2="18" stroke="currentColor" stroke-width="2"/>
          </svg>
        </button>
      </div>
      
      <div class="modal-content">
        <div class="nft-preview" id="modalNFTPreview">
          <!-- NFT details will be populated here -->
        </div>
        
        <div class="purchase-details">
          <div class="price-breakdown">
            <div class="price-row">
              <span>Precio del NFT:</span>
              <span id="nftPrice">0 MATIC</span>
            </div>
            <div class="price-row">
              <span>Gas estimado:</span>
              <span id="gasEstimate">~0.01 MATIC</span>
            </div>
            <div class="price-row total">
              <span>Total aproximado:</span>
              <span id="totalPrice">0 MATIC</span>
            </div>
          </div>
          
          <div class="purchase-actions">
            <button class="btn btn-secondary" id="cancelPurchase">Cancelar</button>
            <button class="btn btn-primary" id="confirmPurchase">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M9 12L11 14L15 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
              </svg>
              Confirmar Compra
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <Footer slot="footer" />
</Layout>

<style>
  /* Store Hero */
  .store-hero {
    background: linear-gradient(135deg, rgba(123, 63, 228, 0.1) 0%, rgba(231, 60, 126, 0.1) 100%);
    padding: 6rem 0 4rem;
  }
  
  .hero-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .hero-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 700;
    line-height: 1.1;
    margin-bottom: 1.5rem;
  }
  
  .hero-title span {
    display: block;
  }
  
  .hero-description {
    font-size: 1.25rem;
    color: var(--text-secondary);
    margin-bottom: 2rem;
    line-height: 1.6;
  }
  
  /* Wallet Status */
  .wallet-status {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-lg);
    padding: 2rem;
    margin-top: 2rem;
  }
  
  .wallet-disconnected {
    text-align: center;
  }
  
  .wallet-disconnected p {
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }
  
  .wallet-connected {
    display: flex;
    justify-content: center;
  }
  
  .wallet-info {
    display: flex;
    gap: 2rem;
    align-items: center;
  }
  
  .wallet-address,
  .wallet-balance {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .address-label,
  .balance-label {
    font-size: 0.875rem;
    color: var(--text-secondary);
  }
  
  .address-value,
  .balance-value {
    font-weight: 600;
    font-family: monospace;
  }
  
  /* Filters */
  .filters {
    background: var(--bg-secondary);
    padding: 2rem 0;
    border-bottom: 1px solid var(--border-color);
  }
  
  .filters-container {
    display: flex;
    gap: 2rem;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .filter-group label {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 600;
  }
  
  .filter-select {
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--radius-md);
    background: var(--bg-card);
    color: var(--text-primary);
    min-width: 150px;
  }
  
  .filter-select:focus {
    outline: none;
    border-color: var(--primary-purple);
  }
  
  /* NFT Grid */
  .nft-grid-section {
    padding: 4rem 0;
  }
  
  .loading-state {
    text-align: center;
    padding: 4rem 0;
  }
  
  .loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid var(--border-color);
    border-top: 3px solid var(--primary-purple);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .nft-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
  }
  
  .nft-card {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-lg);
    overflow: hidden;
    transition: var(--transition-base);
    cursor: pointer;
  }
  
  .nft-card:hover {
    border-color: var(--primary-purple);
    transform: translateY(-5px);
    box-shadow: var(--shadow-lg);
  }
  
  .nft-image {
    aspect-ratio: 1;
    background: var(--bg-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
  }
  
  .nft-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .nft-placeholder {
    font-size: 4rem;
    opacity: 0.5;
  }
  
  .nft-info {
    padding: 1.5rem;
  }
  
  .nft-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }
  
  .nft-artist {
    color: var(--text-secondary);
    margin-bottom: 1rem;
    font-size: 0.9rem;
  }
  
  .nft-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .nft-type {
    font-size: 0.875rem;
    color: var(--primary-purple);
    font-weight: 600;
  }
  
  .nft-id {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-family: monospace;
  }
  
  .nft-price {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-primary);
    text-align: center;
    margin-bottom: 1rem;
  }
  
  .nft-actions {
    display: flex;
    gap: 0.5rem;
  }
  
  .btn-small {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
  }
  
  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 4rem 0;
  }
  
  .empty-icon {
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }
  
  .empty-state h3 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }
  
  .empty-state p {
    color: var(--text-secondary);
  }
  
  /* Modal */
  .modal-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: var(--z-modal);
    backdrop-filter: blur(5px);
  }
  
  .modal {
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-lg);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
  }
  
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }
  
  .modal-header h3 {
    font-size: 1.25rem;
    font-weight: 600;
  }
  
  .modal-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: var(--radius-md);
    transition: var(--transition-base);
  }
  
  .modal-close:hover {
    background: var(--bg-card);
    color: var(--text-primary);
  }
  
  .modal-content {
    padding: 1.5rem;
  }
  
  .purchase-details {
    margin-top: 1.5rem;
  }
  
  .price-breakdown {
    background: var(--bg-card);
    border-radius: var(--radius-md);
    padding: 1rem;
    margin-bottom: 1.5rem;
  }
  
  .price-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .price-row.total {
    border-top: 1px solid var(--border-color);
    padding-top: 0.5rem;
    margin-top: 0.5rem;
    font-weight: 600;
  }
  
  .purchase-actions {
    display: flex;
    gap: 1rem;
  }
  
  .purchase-actions .btn {
    flex: 1;
  }
  
  /* Utility Classes */
  .hidden {
    display: none !important;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .filters-container {
      flex-direction: column;
      align-items: stretch;
    }
    
    .filter-group {
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
    }
    
    .wallet-info {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }
    
    .purchase-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  // Este script será reemplazado por la integración real con ethers.js
  // Por ahora muestra datos mock para desarrollo
  
  // Mock NFT data - será reemplazado por llamadas reales al contrato
  const mockNFTs = [
    {
      id: 1,
      title: "Piano Aguinaldo",
      artist: "Gerardo Gerulewicz",
      price: "0.5",
      type: "Álbum completo",
      image: null,
      description: "Interpretación magistral del aguinaldo venezolano en piano"
    },
    {
      id: 2,
      title: "Momentos Musicales Vol.1",
      artist: "Varios Artistas",
      price: "1.2",
      type: "Colección especial",
      image: null,
      description: "Primera colección de momentos musicales clásicos"
    },
    {
      id: 3,
      title: "Schubert Variations",
      artist: "Goulnara Galimchina",
      price: "0.8",
      type: "Pieza individual",
      image: null,
      description: "Variaciones de Schubert interpretadas de manera única"
    },
    {
      id: 4,
      title: "Te Haré Pescador",
      artist: "Jesús Aníbal Bello",
      price: "0.3",
      type: "Pieza individual",
      image: null,
      description: "Obra coral venezolana de gran belleza"
    }
  ];
  
  // DOM Elements
  const connectWalletBtn = document.getElementById('connectWalletBtn');
  const walletStatus = document.getElementById('walletStatus');
  const walletDisconnected = document.getElementById('walletDisconnected');
  const walletConnected = document.getElementById('walletConnected');
  const walletAddress = document.getElementById('walletAddress');
  const walletBalance = document.getElementById('walletBalance');
  const nftGrid = document.getElementById('nftGrid');
  const loadingState = document.getElementById('loadingState');
  const emptyState = document.getElementById('emptyState');
  const purchaseModal = document.getElementById('purchaseModal');
  const modalClose = document.getElementById('modalClose');
  const refreshBtn = document.getElementById('refreshNFTs');
  
  // State
  let isWalletConnected = false;
  let currentAccount = null;
  let nftData = [];
  
  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    loadNFTs();
    setupEventListeners();
  });
  
  function setupEventListeners() {
    connectWalletBtn?.addEventListener('click', connectWallet);
    modalClose?.addEventListener('click', closePurchaseModal);
    refreshBtn?.addEventListener('click', loadNFTs);
    
    // Close modal on overlay click
    purchaseModal?.addEventListener('click', (e) => {
      if (e.target === purchaseModal) {
        closePurchaseModal();
      }
    });
  }
  
  async function connectWallet() {
    // Placeholder para integración real con MetaMask
    console.log('Connecting wallet...');
    
    // Simular conexión exitosa
    setTimeout(() => {
      isWalletConnected = true;
      currentAccount = '0x742d35Cc6634C0532925a3b8D0Cd3e85Db9eEf76';
      updateWalletUI();
      loadNFTs(); // Recargar NFTs con wallet conectado
    }, 1000);
  }
  
  function updateWalletUI() {
    if (isWalletConnected && currentAccount) {
      walletDisconnected.classList.add('hidden');
      walletConnected.classList.remove('hidden');
      
      // Mostrar dirección truncada
      const truncatedAddress = `${currentAccount.slice(0, 6)}...${currentAccount.slice(-4)}`;
      walletAddress.textContent = truncatedAddress;
      
      // Simular balance
      walletBalance.textContent = '5.23 MATIC';
    } else {
      walletDisconnected.classList.remove('hidden');
      walletConnected.classList.add('hidden');
    }
  }
  
  async function loadNFTs() {
    showLoading();
    
    // Simular carga desde blockchain
    setTimeout(() => {
      nftData = mockNFTs;
      renderNFTs(nftData);
      hideLoading();
    }, 2000);
  }
  
  function showLoading() {
    loadingState.classList.remove('hidden');
    nftGrid.classList.add('hidden');
    emptyState.classList.add('hidden');
  }
  
  function hideLoading() {
    loadingState.classList.add('hidden');
    nftGrid.classList.remove('hidden');
  }
  
  function renderNFTs(nfts) {
    if (nfts.length === 0) {
      nftGrid.classList.add('hidden');
      emptyState.classList.remove('hidden');
      return;
    }
    
    nftGrid.innerHTML = nfts.map(nft => createNFTCard(nft)).join('');
    
    // Agregar event listeners a las cards
    document.querySelectorAll('.nft-card').forEach(card => {
      card.addEventListener('click', () => {
        const nftId = parseInt(card.dataset.nftId);
        openPurchaseModal(nftId);
      });
    });
  }
  
  function createNFTCard(nft) {
    return `
      <div class="nft-card" data-nft-id="${nft.id}">
        <div class="nft-image">
          ${nft.image ? 
            `<img src="${nft.image}" alt="${nft.title}" />` : 
            `<div class="nft-placeholder">🎵</div>`
          }
        </div>
        <div class="nft-info">
          <h3 class="nft-title">${nft.title}</h3>
          <p class="nft-artist">${nft.artist}</p>
          <div class="nft-meta">
            <span class="nft-type">${nft.type}</span>
            <span class="nft-id">#${nft.id}</span>
          </div>
          <div class="nft-price">${nft.price} MATIC</div>
          <div class="nft-actions">
            <button class="btn btn-primary btn-small">
              ${isWalletConnected ? 'Comprar' : 'Conectar Wallet'}
            </button>
          </div>
        </div>
      </div>
    `;
  }
  
  function openPurchaseModal(nftId) {
    if (!isWalletConnected) {
      connectWallet();
      return;
    }
    
    const nft = nftData.find(n => n.id === nftId);
    if (!nft) return;
    
    // Aquí se mostraría el modal con los detalles del NFT
    console.log('Opening purchase modal for NFT:', nft);
    purchaseModal.classList.remove('hidden');
  }
  
  function closePurchaseModal() {
    purchaseModal.classList.add('hidden');
  }
  
  // Export functions for testing
  window.DAGStore = {
    connectWallet,
    loadNFTs,
    openPurchaseModal
  };
</script>
